/** TRACCC library, part of the ACTS project (R&D line)
 *
 * (c) 2022 CERN for the benefit of the ACTS project
 *
 * Mozilla Public License Version 2.0
 */

// SYCL library include(s).
#include "../utils/get_queue.hpp"

// SYCL include(s).
#include <CL/sycl.hpp>

// Project include(s).
#include "measurement_creation.hpp"

namespace traccc::sycl {

void measurement_creation(measurement_container_types::view measurements_view,
                          cluster_container_types::const_view clusters_view,
                          const cell_container_types::const_view& cells_view,
                          queue_wrapper queue) {

    // The execution range of the kernel
    auto n_clusters = clusters_view.headers.size();

    // Calculate the execution NDrange for the kernel
    auto wGroupSize = 64;
    auto num = (n_clusters + wGroupSize - 1) / wGroupSize;
    auto ndrange = ::sycl::nd_range<1>{::sycl::range<1>(num * wGroupSize),
                                       ::sycl::range<1>(wGroupSize)};

    details::get_queue(queue)
        .submit([&ndrange, &clusters_view, &measurements_view,
                 &cells_view](::sycl::handler& h) {
            h.parallel_for<class MeasurementCreation>(
                ndrange, [=](::sycl::nd_item<1> item) {
                    // Get the current index
                    auto idx = item.get_global_linear_id();

                    // Initialize device vectors
                    const cluster_container_types::const_device clusters_device(
                        clusters_view);
                    measurement_container_types::device measurements_device(
                        measurements_view);
                    cell_container_types::const_device cells_device(cells_view);

                    // Ignore if idx is out of range
                    if (idx >= clusters_device.size())
                        return;

                    // items: cluster of cells at current idx
                    // header: cluster_id object with the information about the
                    // cell module
                    const auto& cluster = clusters_device[idx].items;
                    const auto& module_link = clusters_device[idx].header;
                    const auto& module = cells_device.at(module_link).header;

                    // Should not happen
                    assert(cluster.empty() == false);

                    // Fill measurement from cluster
                    detail::fill_measurement(measurements_device, cluster,
                                             module, module_link, idx);
                });
        })
        .wait_and_throw();
}

}  // namespace traccc::sycl